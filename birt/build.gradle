import javax.swing.text.MutableAttributeSet
import javax.swing.text.html.HTML
import javax.swing.text.html.HTMLEditorKit
import javax.swing.text.html.parser.ParserDelegator
import java.util.jar.JarFile

buildscript {
    ext {
        springBootVersion = '2.0.0.M7'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

mainClassName = "com.ibm.birt.BirtApplication"

group = 'com.ibm.birt'
version = '0.0.1'

jar {
    manifest {
        attributes(
                'Implementation-Vendor': 'IBM Corp.',
                'Artifact-Name': 'Birt Engine',
                'Group': group,
                'Module': project.name,
                'Version': version,
                'Main-Class': mainClassName,
                'Class-Path': (configurations.runtime.dependencies.collect() + jar.archivePath).join(' ')

        )
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile(fileTree(dir: "../birt-runtime-4_5_0/ReportEngine", include: '**/*.jar'))
    testCompile("com.github.lalyos:jfiglet:0.0.8")
    testCompile("junit:junit-dep:4.10")
}

task grepLicenses {
    dependsOn(clean)
    doLast {
        configurations.runtime.each { jar ->
            println "- ${jar.name}"
            def jarFile = new JarFile(jar)
            jarFile.entries().each { jarEntry ->
                if (jarEntry =~ /(?i)license.*/) {
                    println " > $jarEntry.name"
                    def f = new File("${project.buildDir}/LICENSES", "LICENSE.${jar.name.substring(0, (jar.name.length() - 4))}.txt")
                    f.parentFile.mkdirs()
                    if (!f.exists())
                        f.createNewFile()

                    def fr = new InputStreamReader(jarFile.getInputStream(jarEntry))
                    if (jarEntry =~ /.*\.html/) {
                        def sb = new StringBuffer()
                        def isNewline = false
                        def isStarted = false
                        def cb = new HTMLEditorKit.ParserCallback() {
                            @Override
                            void handleStartTag(HTML.Tag t, MutableAttributeSet a, int pos) {
                                if (!isNewline)
                                    isNewline = (t ==~ /(?i)p|br|h1|h2|h3|h4|h5|h6|pre/)
                                if (!isStarted) {
                                    isStarted = (t ==~ /(?i)body/)
                                }
                            }

                            @Override
                            void handleText(char[] data, int pos) {
                                if (isStarted) {
                                    def sData = new String(data)
                                    sData = isNewline ? sprintf("%n%s", sData) : sprintf(sData)
                                    sb.append(sData)
                                    isNewline = false
                                }
                            }
                        }
                        new ParserDelegator().parse(fr, cb, true)
                        sb.append(sprintf("%n%n"))
                        f.text += sb.toString()
                    } else {
                        f.text += fr.text
                    }
                }
            }
        }
        project.copy() {
            from "${project.buildDir}/LICENSES"
            into "${project.rootDir}/LICENSES"
        }
    }
}